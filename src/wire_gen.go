// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/jinzhu/gorm"
	"krisha/src/http"
	"krisha/src/internal"
	"krisha/src/internal/repo"
	"krisha/src/internal/service/admin"
	"krisha/src/internal/service/apartments"
	"krisha/src/internal/service/api"
	"krisha/src/internal/service/db-messages-log"
	"krisha/src/internal/service/parser"
	"krisha/src/internal/service/tg"
	"krisha/src/tghttp"
)

// Injectors from di.go:

func InitServices(db2 *gorm.DB, tgServicer tg.TgServicer, logger db_messages_log.DbMessagesLogger) *Services {
	apsLoggerService := apartments.NewApsLoggerService()
	apsTgSenderService := apartments.NewApsTgSenderService(tgServicer)
	krishaClientService := api.NewKrishaClientService(tgServicer)
	parserSettingsRepository := repo.NewParserSettingsRepository(db2)
	factory := parser.NewParserFactory(tgServicer, krishaClientService, parserSettingsRepository)
	service := parser.NewParserService(parserSettingsRepository, tgServicer, factory, krishaClientService)
	permissionsService := internal.NewPermissionsService()
	knownChatsRepo := repo.NewKnownChatsRepo(db2)
	adminService := admin.NewService(parserSettingsRepository, knownChatsRepo)
	tgInteractor := tghttp.NewTgInteractor(tgServicer, service, permissionsService, adminService, logger)
	controller := http.NewController(tgInteractor, db2, service)
	mainServices := NewServices(apsLoggerService, apsTgSenderService, krishaClientService, service, tgServicer, tgInteractor, factory, controller)
	return mainServices
}
